#line 2 "../src/parser/lexer.cxx"

#line 4 "../src/parser/lexer.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cpp_yy_create_buffer
#define yy_delete_buffer cpp_yy_delete_buffer
#define yy_flex_debug cpp_yy_flex_debug
#define yy_init_buffer cpp_yy_init_buffer
#define yy_flush_buffer cpp_yy_flush_buffer
#define yy_load_buffer_state cpp_yy_load_buffer_state
#define yy_switch_to_buffer cpp_yy_switch_to_buffer
#define yyin cpp_yyin
#define yyleng cpp_yyleng
#define yylex cpp_yylex
#define yylineno cpp_yylineno
#define yyout cpp_yyout
#define yyrestart cpp_yyrestart
#define yytext cpp_yytext
#define yywrap cpp_yywrap
#define yyalloc cpp_yyalloc
#define yyrealloc cpp_yyrealloc
#define yyfree cpp_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cpp_yyrestart(cpp_yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t cpp_yyleng;

extern FILE *cpp_yyin, *cpp_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cpp_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cpp_yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cpp_yyrestart()), so that the user can continue scanning by
	 * just pointing cpp_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cpp_yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t cpp_yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cpp_yywrap()'s to do buffer switches
 * instead of setting up a fresh cpp_yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cpp_yyrestart (FILE *input_file  );
void cpp_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cpp_yy_create_buffer (FILE *file,int size  );
void cpp_yy_delete_buffer (YY_BUFFER_STATE b  );
void cpp_yy_flush_buffer (YY_BUFFER_STATE b  );
void cpp_yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void cpp_yypop_buffer_state (void );

static void cpp_yyensure_buffer_stack (void );
static void cpp_yy_load_buffer_state (void );
static void cpp_yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cpp_yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cpp_yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cpp_yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cpp_yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *cpp_yyalloc (yy_size_t  );
void *cpp_yyrealloc (void *,yy_size_t  );
void cpp_yyfree (void *  );

#define yy_new_buffer cpp_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cpp_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cpp_yy_create_buffer(cpp_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cpp_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cpp_yy_create_buffer(cpp_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define cpp_yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *cpp_yyin = (FILE *) 0, *cpp_yyout = (FILE *) 0;

typedef int yy_state_type;

extern int cpp_yylineno;

int cpp_yylineno = 1;

extern char *cpp_yytext;
#define yytext_ptr cpp_yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cpp_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cpp_yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 81
#define YY_END_OF_BUFFER 82
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[327] =
    {   0,
        0,    0,   18,   18,   18,   18,    0,    0,   18,   18,
       18,   18,   18,   18,   18,   18,    0,    0,    0,    0,
       44,   44,   45,   45,    0,    0,   76,   76,   82,   73,
        3,    1,   66,   17,   62,   67,   63,   73,   73,   69,
       70,   73,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   21,   18,   81,   21,   21,   26,   22,
       23,   26,   24,   25,   28,   18,   27,   30,   18,   29,
       46,   31,   33,   18,   32,   43,   42,   43,   43,   44,
       45,   75,   75,   74,   80,   76,   79,   78,   77,    3,
        1,    1,    2,    0,    0,    0,    0,    0,    0,    0,

       71,   64,   65,   71,    0,   70,   70,   70,   61,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   21,   21,   18,   21,   21,
       26,   26,   27,   29,   31,   32,   42,    0,    0,    0,
        0,    0,    0,   44,   45,    0,   74,   76,    2,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   65,
       72,   72,   72,   72,   55,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   21,   21,    0,    0,
       34,    0,    0,   38,    0,    0,    0,    0,    0,    7,
        0,    0,    0,    0,    0,    0,    0,   71,   58,   72,

       51,   72,   57,   72,   72,   72,   72,   72,   72,   72,
       68,   72,   72,   21,   19,    0,    0,    0,   34,    0,
        0,    0,   38,    0,   13,   12,    0,    0,    0,    0,
        0,    0,    0,    0,   52,   72,   72,   72,   72,   56,
       72,   72,   72,   72,   21,   19,   19,    0,   35,    0,
        0,   39,    0,    0,   13,   12,   14,    0,    0,    0,
        0,    0,    0,    0,   72,   72,   72,   48,   59,   53,
       72,   72,   21,   36,   35,   37,   40,   39,   41,    0,
       14,   16,    8,    0,    0,    0,   11,    0,   72,   50,
       72,   54,   72,   21,   37,   41,   10,    9,    0,    4,

        0,   72,   72,   60,   21,    5,    0,   15,   47,   49,
       21,    0,   21,    0,   21,    0,   21,    0,   21,    6,
       21,   21,   21,   20,   20,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    1,    8,    9,   10,
       11,   12,   13,   14,   13,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
        1,    1,    1,    1,   21,   21,   22,   21,   23,   21,
       24,   21,   21,   21,   21,   25,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
        1,    1,    1,    1,   26,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   21,   21,   36,   37,   38,
       39,   40,   21,   41,   42,   43,   44,   45,   46,   47,
       48,   21,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[358] =
    {   0,
        0,    0,   47,   51,   56,   61,   67,   77,   97,    0,
      145,    0,  193,    0,  241,    0,   48,   71,   81,   82,
      720,  719,  718,  717,  288,  292,  298,  302,  719,  724,
       89,  312,  724,  316,  724,  724,  724,   78,  280,  293,
      305,  699,    0,  290,  679,  689,  677,  675,  686,   16,
      293,  258,  674,   63,  327,  724,  332,  333,  337,  724,
      724,  339,  724,  724,  724,  347,    0,  724,  348,    0,
      724,    0,  724,  353,    0,  724,    0,  359,  361,    0,
        0,  724,  363,  724,  724,  365,  724,  724,  724,  370,
      708,  374,    0,    0,  679,  342,  287,  668,  670,  680,

      364,  724,    0,  368,  383,  387,  391,  724,  724,    0,
      679,  678,  660,  667,  659,  663,  663,  349,  671,  659,
      664,  655,  651,  654,  651,  405,    0,  409,  413,  415,
      417,    0,    0,    0,    0,    0,    0,  419,  295,  660,
      424,  389,  659,    0,    0,  426,  724,  428,    0,  658,
      397,  659,  647,  436,  658,  659,  655,  643,  429,    0,
      642,  640,  644,  638,    0,  646,  647,  632,  633,  639,
      633,  635,  628,  640,  639,  634,  438,  446,  410,  638,
        0,  414,  637,    0,  631,  633,  633,  628,  623,  455,
      630,  630,  623,  625,  626,  618,  444,  446,    0,  613,

        0,  623,    0,  611,  625,  620,  615,  606,  617,  618,
        0,  616,  612,  602,  463,  611,  611,  606,    0,  608,
      608,  603,    0,  599,    0,    0,  604,  594,  602,  602,
      588,  594,  598,  594,    0,  588,  584,  597,  596,    0,
      594,  580,  591,  583,  572,  465,    0,  467,  448,  586,
      471,  473,  583,  581,    0,    0,    0,  477,  478,  577,
      576,  576,  479,  562,  570,  563,  548,    0,    0,    0,
      556,  554,  540,  483,  453,  484,  485,  490,  492,  496,
        0,  497,  498,  502,  548,  503,  504,  543,  544,    0,
      539,    0,  510,  496,  508,  509,  510,  514,  515,  516,

      520,  507,  507,    0,  505,  521,  497,  522,    0,    0,
      497,  502,  504,  446,  437,  391,  382,  526,  376,  527,
      367,  362,  348,    0,    0,  724,  541,  544,  547,  550,
      553,  556,  559,  562,  565,  366,  568,  571,  345,  337,
       89,   74,  574,  577,  580,  583,  586,  589,  592,  595,
      598,  601,  604,  607,  610,  613,  616
    } ;

static yyconst flex_int16_t yy_def[358] =
    {   0,
      326,    1,  327,  327,  328,  328,  329,  329,  326,    9,
      326,   11,  326,   13,  326,   15,  330,  330,  330,  330,
      331,  331,  332,  332,  333,  333,  334,  334,  326,  326,
      326,  335,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  337,  326,  326,  337,  337,  338,  326,
      326,  338,  326,  326,  326,  326,  339,  326,  326,  340,
      326,  341,  326,  326,  342,  326,  343,  326,  326,  344,
      345,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      335,  335,  346,   34,  326,  326,  326,  326,  326,  326,

      326,  326,  347,  326,  326,  326,  326,  326,  326,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  337,  348,  326,  337,  337,
      338,  349,  339,  340,  341,  342,  343,  326,  326,  326,
      326,  326,  326,  344,  345,  326,  326,  326,  346,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  347,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  337,  337,  326,  326,
      350,  326,  326,  351,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  348,  352,  326,  326,  326,  350,  326,
      326,  326,  351,  326,  353,  354,  326,  326,  326,  326,
      326,  326,  326,  326,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  348,  352,  355,  326,  326,  326,
      326,  326,  326,  326,  353,  354,  356,  326,  326,  326,
      326,  326,  326,  326,  336,  336,  336,  336,  336,  336,
      336,  336,  348,  326,  326,  326,  326,  326,  326,  326,
      356,  326,  326,  326,  326,  326,  326,  326,  336,  336,
      336,  336,  336,  348,  326,  326,  326,  326,  326,  326,

      326,  336,  336,  336,  348,  326,  326,  326,  336,  336,
      348,  326,  348,  326,  348,  326,  348,  326,  348,  326,
      348,  348,  348,  357,  357,    0,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326
    } ;

static yyconst flex_int16_t yy_nxt[773] =
    {   0,
       30,   31,   32,   31,   31,   33,   34,   35,   36,   30,
       30,   37,   30,   30,   38,   39,   40,   41,   42,   30,
       43,   43,   43,   43,   43,   43,   43,   43,   44,   43,
       45,   46,   43,   43,   47,   48,   43,   49,   43,   50,
       43,   51,   52,   53,   43,   43,   43,   43,   55,   56,
       77,   55,   55,   56,   78,   55,  118,   55,   56,  119,
       55,   60,   55,   56,  127,   55,   60,  127,   56,   56,
       57,   56,   63,   77,   57,   61,  136,   78,   56,   56,
       61,   56,   63,   77,   77,   58,   64,   79,   79,   58,
       90,  135,   90,   90,  101,  101,   64,   65,   66,   56,

       65,   66,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   68,   69,   56,   68,   69,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   71,   55,   56,   71,   55,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   73,   74,   56,   73,   74,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   83,
       56,  102,   83,   83,   56,  103,   83,   84,  123,   86,

       87,   84,   86,   86,   87,  124,   86,  104,   88,  105,
      105,   89,   88,   92,   93,   89,   92,   94,  154,  104,
       94,  106,  107,  111,  155,  112,  120,  121,  128,  108,
      179,  128,  180,  127,  127,  122,  127,  127,  132,  134,
      132,  132,  132,  132,  132,   95,   96,  133,  128,  128,
       97,  128,  128,  129,  128,   98,  132,  128,  132,   99,
      138,  100,  141,  138,  146,  141,  148,  146,  110,  148,
      130,   90,  147,   90,   90,   92,   93,  151,   92,  152,
      101,  101,  153,  168,  101,  101,  159,  169,  324,  139,
      159,  142,  323,  140,  159,  143,  322,  104,  159,  105,

      105,  104,  321,  106,  106,  104,  127,  106,  107,  127,
      128,  108,  319,  128,  127,  108,  127,  127,  132,  127,
      138,  132,  132,  138,  182,  141,  183,  146,  141,  148,
      146,  186,  148,  318,  177,  147,  132,  190,  187,  127,
      190,  197,  214,  178,  216,  198,  198,  127,  220,  139,
      127,  217,  275,  140,  142,  221,  190,  275,  143,  190,
      198,  198,  198,  198,  247,  191,  247,  247,  274,  247,
      317,  274,  277,  192,  278,  277,  215,  278,  282,  283,
      287,  282,  283,  287,  274,  295,  277,  274,  295,  277,
      275,  278,  316,  296,  278,  275,  296,  297,  282,  283,

      297,  282,  283,  298,  300,  287,  298,  300,  287,  295,
      296,  297,  295,  296,  297,  298,  306,  300,  298,  306,
      300,  308,  306,  308,  308,  306,  308,  320,  320,  315,
      320,  320,  314,  313,  312,  311,  310,  309,  305,  304,
      307,   54,   54,   54,   59,   59,   59,   62,   62,   62,
       76,   76,   76,   80,   80,   80,   81,   81,   81,   82,
       82,   82,   85,   85,   85,   91,   91,   91,  126,  303,
      126,  131,  302,  131,  137,  301,  137,  144,  299,  144,
      145,  294,  145,  149,  293,  149,  160,  292,  160,  127,
      291,  127,  132,  290,  132,  219,  289,  219,  223,  288,

      223,  246,  286,  246,  255,  285,  255,  256,  284,  256,
      247,  280,  247,  281,  279,  281,  325,  276,  325,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  254,  253,  252,  251,
      250,  249,  248,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  211,  235,  234,  233,  232,  231,  230,
      229,  228,  227,  226,  225,  224,  222,  218,  213,  212,
      211,  210,  209,  208,  207,  206,  205,  204,  203,  202,
      201,  200,  199,  196,  195,  194,  193,  189,  188,  185,
      184,  181,  176,  175,  174,  173,  172,  171,  170,  167,

      166,  165,  164,  163,  162,  161,  158,  157,  156,  150,
      326,  125,  117,  116,  115,  114,  113,  109,  326,   56,
       56,   56,   56,   29,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326
    } ;

static yyconst flex_int16_t yy_chk[773] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
       17,    3,    4,    4,   17,    4,   50,    5,    5,   50,
        5,    5,    6,    6,   54,    6,    6,   54,    7,    7,
        3,    7,    7,   18,    4,    5,  342,   18,    8,    8,
        6,    8,    8,   19,   20,    3,    7,   19,   20,    4,
       31,  341,   31,   31,   38,   38,    8,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   25,
       25,   39,   25,   26,   26,   39,   26,   25,   52,   27,

       27,   26,   27,   28,   28,   52,   28,   40,   27,   40,
       40,   27,   28,   32,   32,   28,   32,   34,   97,   41,
       34,   41,   41,   44,   97,   44,   51,   51,   55,   41,
      139,   55,  139,   57,   58,   51,   57,   58,   59,  340,
       62,   59,   59,   62,   62,   34,   34,  339,   66,   69,
       34,   66,   69,   57,   74,   34,   59,   74,   62,   34,
       78,   34,   79,   78,   83,   79,   86,   83,  336,   86,
       58,   90,   83,   90,   90,   92,   92,   96,   92,   96,
      101,  101,   96,  118,  104,  104,  101,  118,  323,   78,
      104,   79,  322,   78,  101,   79,  321,  105,  104,  105,

      105,  106,  319,  106,  106,  107,  126,  107,  107,  126,
      128,  106,  317,  128,  129,  107,  130,  129,  131,  130,
      138,  131,  131,  138,  142,  141,  142,  146,  141,  148,
      146,  151,  148,  316,  129,  146,  131,  154,  151,  177,
      154,  159,  177,  130,  179,  159,  159,  178,  182,  138,
      178,  179,  249,  138,  141,  182,  190,  275,  141,  190,
      197,  197,  198,  198,  215,  154,  246,  215,  248,  246,
      315,  248,  251,  154,  252,  251,  178,  252,  258,  259,
      263,  258,  259,  263,  274,  276,  277,  274,  276,  277,
      249,  278,  314,  279,  278,  275,  279,  280,  282,  283,

      280,  282,  283,  284,  286,  287,  284,  286,  287,  295,
      296,  297,  295,  296,  297,  298,  299,  300,  298,  299,
      300,  301,  306,  308,  301,  306,  308,  318,  320,  313,
      318,  320,  312,  311,  307,  305,  303,  302,  294,  293,
      299,  327,  327,  327,  328,  328,  328,  329,  329,  329,
      330,  330,  330,  331,  331,  331,  332,  332,  332,  333,
      333,  333,  334,  334,  334,  335,  335,  335,  337,  291,
      337,  338,  289,  338,  343,  288,  343,  344,  285,  344,
      345,  273,  345,  346,  272,  346,  347,  271,  347,  348,
      267,  348,  349,  266,  349,  350,  265,  350,  351,  264,

      351,  352,  262,  352,  353,  261,  353,  354,  260,  354,
      355,  254,  355,  356,  253,  356,  357,  250,  357,  245,
      244,  243,  242,  241,  239,  238,  237,  236,  234,  233,
      232,  231,  230,  229,  228,  227,  224,  222,  221,  220,
      218,  217,  216,  214,  213,  212,  210,  209,  208,  207,
      206,  205,  204,  202,  200,  196,  195,  194,  193,  192,
      191,  189,  188,  187,  186,  185,  183,  180,  176,  175,
      174,  173,  172,  171,  170,  169,  168,  167,  166,  164,
      163,  162,  161,  158,  157,  156,  155,  153,  152,  150,
      143,  140,  125,  124,  123,  122,  121,  120,  119,  117,

      116,  115,  114,  113,  112,  111,  100,   99,   98,   95,
       91,   53,   49,   48,   47,   46,   45,   42,   29,   24,
       23,   22,   21,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cpp_yy_flex_debug;
int cpp_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cpp_yytext;
#line 1 "../src/parser/lexer.lxx"
/* Filename: lexer.lxx */
#line 4 "../src/parser/lexer.lxx"
	#include "lexer.h"
	#include "parser.h"
	#include "parser.dxx"

	#include "cpp.h"
	#include "preprocess/preparser.h"

	#include <cctype>        // isxdigit
	#include <iostream>      // std::cerr, std::ostream
	#include <deque>         // std::deque

	#define yylval cpp_yylval
	#define yylloc cpp_yylloc
	#define yyerror cpp_yyerror
	#define yywarning cpp_yywarning
	#define YY_DECL int cpp_yylex(void)
	using namespace std;


	/* Struct Definitions */
	// An Input holds extra per-file information while lexing and parsing
	struct Input : File
	{
		Input(const string& name = "<???>");

		string current_line; // holds the current line for error reporting
		list<string> comments;
		int line_number; // current line of the input
		int col_number; // current col of the input
		int times_included; // number of times the file has been included
		int condition_depth; // depth of #if statements

		bool is_macro;
		string macro_value;
	};

	struct MacroCall {
		std::string identifier;
		std::vector<std::string> arg_values;
	};

	/* Lexer State */
	static int error_count;
	static int warning_count;
	static deque<Input*> inputs;
	static Module* current_module = NULL;
	#define macros (current_module->macros)
	#define files (current_module->files)
	static MacroCall current_macro;
	static string current_value;
	static unordered_map<string, string> prev_include_dir;

	#define echo() \
		cout << "Token(" << inputs.front()->name << "): " << cpp_yytext << "\n"
	#define echo_location()\
		cout << "(in file " << inputs.front()->name << " at line " << inputs.front()->line_number << ").\n";

	/* Function Declarations */
	// emit outputs the specified token from the lexer with location information
	#define emit(token)                                        \
		yylloc.last_line = inputs.front()->line_number;        \
		yylloc.last_column = inputs.front()->col_number;       \
		if(!inputs.front()->comments.back().empty()) {         \
			yylloc.comment = &inputs.front()->comments.back(); \
			inputs.front()->comments.push_back("");            \
		}                                                      \
		return token
		
	// accept is called below when receiving a regex from the lexer;
	//     it increments the current column number, and sets some location information
	static void accept();

	// accept_include is an alternate accepts that handles the #include directive;
	//     returns if there was an error with the include.
	static bool accept_include(char end_mark, bool next = false);

	// peek_char returns the character that will be returned in
	//     the next call to read_char.
	inline int peek_char();

	// read_char reads and returns a single character,
	//     incrementing the line and column numbers as appropriate.
	inline int read_char();
	static int read_char(int & line, int & col);

	// todo: doc
	inline char read_char_const(bool auto_escape = false);
	static char read_char_const(int & line, int & col, bool auto_escape = false);

	// todo: doc
	static void scan_define(const string& identifier);
	static string scan_if();
	static string scan_block_comment();
	static string scan_string_literal(char quote_mark = '"');

	// todo: doc
	static string replace_substr(string orig, string substr, string replace);
/* Flex Options */
/* Lexer States */













/* Regex Definitions */
/*"/*
// These regexs are correct to the specification, but we're using simplified
//     versions until someone feels the need to implement them.

HEXNUM_LITERAL  (0x[0-9a-fA-F]*([uU](l|L|ll|LL)?|(l|L|ll|LL)[uU]?)?)
BINARY_LITERAL  (0[bB][01]+([uU](l|L|ll|LL)?|(l|L|ll|LL)[uU]?)?)
DECIMAL_LITERAL ([1-9]+[0-9]*([uU](l|L|ll|LL)?|(l|L|ll|LL)[uU]?)?)
FLOATING_POINT  ((([0-9]+[.])|([0-9]*[.][0-9]+))([eE][+-]?[0-9]+)?[lLfF]?)
OCTAL_LITERAL   (0[0-7]*([uU](l|L|ll|LL)?|(l|L|ll|LL)[uU]?)?)
*/
#line 881 "../src/parser/lexer.cxx"

#define INITIAL 0
#define pragma 1
#define include 2
#define include_next 3
#define ifdef 4
#define ifndef 5
#define define 6
#define undef 7
#define elseif 8
#define endif 9
#define ppr_warning 10
#define ppr_error 11
#define macro_start 12
#define macro_args 13

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cpp_yylex_destroy (void );

int cpp_yyget_debug (void );

void cpp_yyset_debug (int debug_flag  );

YY_EXTRA_TYPE cpp_yyget_extra (void );

void cpp_yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *cpp_yyget_in (void );

void cpp_yyset_in  (FILE * in_str  );

FILE *cpp_yyget_out (void );

void cpp_yyset_out  (FILE * out_str  );

yy_size_t cpp_yyget_leng (void );

char *cpp_yyget_text (void );

int cpp_yyget_lineno (void );

void cpp_yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cpp_yywrap (void );
#else
extern int cpp_yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cpp_yytext, cpp_yyleng, 1, cpp_yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cpp_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cpp_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cpp_yyin))==0 && ferror(cpp_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cpp_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cpp_yylex (void);

#define YY_DECL int cpp_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cpp_yytext and cpp_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 143 "../src/parser/lexer.lxx"


#line 1089 "../src/parser/lexer.cxx"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cpp_yyin )
			cpp_yyin = stdin;

		if ( ! cpp_yyout )
			cpp_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cpp_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cpp_yy_create_buffer(cpp_yyin,YY_BUF_SIZE );
		}

		cpp_yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cpp_yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 327 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 724 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 145 "../src/parser/lexer.lxx"
{
	// New line.  Save a copy of the line so we can print it out for the
	// benefit of the user in case we get an error.

	inputs.front()->current_line = cpp_yytext+1;
	inputs.front()->line_number++;
	inputs.front()->col_number = 0;

	// Return the whole line to the lexer, except the newline character, which we eat.
	yyless(1);
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 157 "../src/parser/lexer.lxx"
{
	// An empty line will clear our current comment
	// This option overrides (\n.*) because it produces a longer output
	if(!inputs.front()->comments.back().empty()) {
		inputs.front()->comments.push_back("");
	}

	inputs.front()->current_line = cpp_yytext+2;
	inputs.front()->line_number += 2;
	inputs.front()->col_number = 0;

	// Return the whole line to the lexer, except the newline characters, which we eat.
	yyless(2);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 172 "../src/parser/lexer.lxx"
{
	// Eat whitespace.
	accept();
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 177 "../src/parser/lexer.lxx"
{
	// Preprocessor #pragma directive
	accept();
	yy_push_state(pragma);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 183 "../src/parser/lexer.lxx"
{
	// Preprocessor #include directive
	accept();
	yy_push_state(include);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 189 "../src/parser/lexer.lxx"
{
	// Preprocessor #include directive
	accept();
	yy_push_state(include_next);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 195 "../src/parser/lexer.lxx"
{
	accept();

	inputs.front()->condition_depth++;
	string condition = scan_if();
	if(!parse_if_directive(current_module, condition)) {
		yy_push_state(elseif);
	} else {
		yy_push_state(INITIAL);
	}
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 207 "../src/parser/lexer.lxx"
{
	// Preprocessor #ifdef directive
	accept();
	yy_push_state(ifdef);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 213 "../src/parser/lexer.lxx"
{
	// Preprocessor #ifndef directive
	accept();
	yy_push_state(ifndef);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 219 "../src/parser/lexer.lxx"
{
	// Preprocessor #define directive
	accept();
	yy_push_state(define);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 225 "../src/parser/lexer.lxx"
{
	// Preprocessor #undef directive
	accept();
	yy_push_state(undef);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 231 "../src/parser/lexer.lxx"
{
	accept();
	if(!inputs.front()->condition_depth) {
		yyerror("Found #else without previous #if.");
	} else {
		yy_pop_state();
		yy_push_state(endif);
	}
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 241 "../src/parser/lexer.lxx"
{
	accept();
	if(!inputs.front()->condition_depth) {
		yyerror("Found #elif without previous #if.");
	} else {
		yy_pop_state();
		yy_push_state(endif);
	}
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 251 "../src/parser/lexer.lxx"
{
	// Preprocessor #endif directive
	accept();
	if(!inputs.front()->condition_depth) {
		yyerror("Found #endif without previous #if.");
	} else {
		inputs.front()->condition_depth--;
		yy_pop_state();
	}
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 262 "../src/parser/lexer.lxx"
{
	accept();
	yy_push_state(ppr_warning);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 267 "../src/parser/lexer.lxx"
{
	accept();
	yy_push_state(ppr_error);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 272 "../src/parser/lexer.lxx"
{
	// Fail on all other preprocessor ops
	accept();
	yyerror("Treesap hasn't implemented this preprocessor directive yet.");

	// Consume the rest of the line, except the newline (\n) character
	int c = peek_char();
	while(c!= '\n' && c != EOF) {
		read_char();
		c = peek_char();
	}
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 285 "../src/parser/lexer.lxx"
{
	accept(); // eat whitespace everywhere
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 289 "../src/parser/lexer.lxx"
{
	accept();
	if(inputs.front()->times_included > 1) {
		inputs.pop_front();
	}
	yy_pop_state();
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 297 "../src/parser/lexer.lxx"
{
	// We're going to handle this header by ignoring it, until we actually have
	// to implement it (see http://gcc.gnu.org/onlinedocs/cpp/System-Headers.html).
	accept();
	yy_pop_state();
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 304 "../src/parser/lexer.lxx"
{
	accept();

	string msg;
	msg += "Treesap doesn't currently support \"#pragma ";
	msg += cpp_yytext;
	msg += "\".";
	yyerror(msg);

	yy_pop_state();
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 316 "../src/parser/lexer.lxx"
{
	// Reads a quoted (") include (& following junk)
	accept();
	if(!accept_include('"')) { yyterminate(); }
	else { yy_pop_state(); }
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 322 "../src/parser/lexer.lxx"
{
	// Reads a braced (<>) include (& following junk)
	accept();
	if(!accept_include('>')) { yyterminate(); }
	else { yy_pop_state(); }
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 329 "../src/parser/lexer.lxx"
{
	// Reads a quoted (") include (& following junk)
	accept();
	if(!accept_include('"', true)) { yyterminate(); }
	else { yy_pop_state(); }
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 335 "../src/parser/lexer.lxx"
{
	// Reads a braced (<>) include (& following junk)
	accept();
	if(!accept_include('>', true)) { yyterminate(); }
	else { yy_pop_state(); }
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 343 "../src/parser/lexer.lxx"
{
	// Accepts any character except spaces, <, or "
	accept();

	string msg;
	msg += "Found unexpected \"";
	msg += cpp_yytext;
	msg += "\" in #include directive.";
	yyerror(msg);

	yy_pop_state();
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 356 "../src/parser/lexer.lxx"
{
	accept();
	yy_pop_state();

	inputs.front()->condition_depth++;
	if(macros.find(cpp_yytext) == macros.end()) {
		yy_push_state(elseif);
	} else {
		yy_push_state(INITIAL);
	}

	// Consume the rest of the line, except the newline (\n) character
	int c = peek_char();
	while(c!= '\n' && c != EOF) {
		read_char();
		c = peek_char();
	}
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 375 "../src/parser/lexer.lxx"
{
	accept();
	yy_pop_state();

	string msg;
	msg += "Found unexpected \"";
	msg += cpp_yytext;
	msg += "\" after #ifdef directive.";
	yyerror(msg);

	yy_push_state(endif);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 388 "../src/parser/lexer.lxx"
{
	accept();
	yy_pop_state();

	inputs.front()->condition_depth++;
	if(macros.find(cpp_yytext) == macros.end()) {
		yy_push_state(INITIAL);
	} else {
		yy_push_state(elseif);
	}

	// Consume the rest of the line, except the newline (\n) character
	int c = peek_char();
	while(c!= '\n' && c != EOF) {
		read_char();
		c = peek_char();
	}
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 407 "../src/parser/lexer.lxx"
{
	accept();
	yy_pop_state();

	string msg;
	msg += "Found unexpected \"";
	msg += cpp_yytext;
	msg += "\" in #ifndef directive.";
	yyerror(msg);

	yy_push_state(endif);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 420 "../src/parser/lexer.lxx"
{
	accept();
	scan_define(cpp_yytext);
	yy_pop_state();
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 426 "../src/parser/lexer.lxx"
{
	accept();
	macros.erase(cpp_yytext);

	// Consume the rest of the line, except the newline (\n) character
	int c = peek_char();
	while(c!= '\n' && c != EOF) {
		read_char();
		c = peek_char();
	}

	yy_pop_state();
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 440 "../src/parser/lexer.lxx"
{
	accept();

	string msg;
	msg += "Found unexpected \"";
	msg += cpp_yytext;
	msg += "\" in #undef directive.";
	yyerror(msg);

	// Consume the rest of the line, except the newline (\n) character
	int c = peek_char();
	while(c!= '\n' && c != EOF) {
		read_char();
		c = peek_char();
	}

	yy_pop_state();
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 459 "../src/parser/lexer.lxx"
{
	// If we find (if|ifdef|ifndef), increment our depth by 1 and find #end
	accept();
	inputs.front()->condition_depth++;
	yy_push_state(endif);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 466 "../src/parser/lexer.lxx"
{
	// If we find #else while looking for #else, tokenize the else code
	yy_pop_state();
	yy_push_state(INITIAL);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 472 "../src/parser/lexer.lxx"
{
	// If we find #elif while looking for #else, test the #if
	accept();

	string condition = scan_if();
	if(parse_if_directive(current_module, condition)) {
		yy_pop_state();
		yy_push_state(INITIAL);
	}
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 483 "../src/parser/lexer.lxx"
{
	accept();

	if(inputs.front()->condition_depth == 0) {
		yyerror("Found #endif with no matching #if/#ifdef/#ifndef.");
	} else {
		inputs.front()->condition_depth--;
	}
	yy_pop_state();

}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 495 "../src/parser/lexer.lxx"
{
	// If we find (if|ifdef|ifndef), increment our depth by 1
	accept();
	inputs.front()->condition_depth++;
	yy_push_state(endif);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 502 "../src/parser/lexer.lxx"
{
	// Consume any else
	accept();
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 507 "../src/parser/lexer.lxx"
{
	// Consume any elif
	accept();
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 512 "../src/parser/lexer.lxx"
{
	accept();
	if(inputs.front()->condition_depth == 0) {
		yyerror("Found #endif with no matching #if/#ifdef/#ifndef.");
	} else {
		inputs.front()->condition_depth--;
	}
	yy_pop_state();
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 522 "../src/parser/lexer.lxx"
{
	accept();

	// Increment the line count
	inputs.front()->current_line = cpp_yytext+1;
	inputs.front()->line_number++;
	inputs.front()->col_number = 0;

	yyless(1);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 533 "../src/parser/lexer.lxx"
{
	accept();
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 537 "../src/parser/lexer.lxx"
{
	accept();
	inputs.front()->current_line = string("#warning ") + cpp_yytext;
	yywarning(cpp_yytext);
	yy_pop_state();
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 544 "../src/parser/lexer.lxx"
{
	accept();
	inputs.front()->current_line = string("#error ") + cpp_yytext;
	yyerror(cpp_yytext);
	yy_pop_state();
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 551 "../src/parser/lexer.lxx"
{
	accept();
	yyerror("Treesap failed to handled characters following pre-processor directive.");
	yyterminate();
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 557 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_NAMESPACE);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 562 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_PUBLIC);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 567 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_PRIVATE);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 572 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_PRIVATE);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 577 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_ENUM);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 582 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_CLASS);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 587 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_STRUCT);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 592 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_TYPEDEF);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 597 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_INT);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 602 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_SHORT);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 607 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_LONG);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 612 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_CHAR);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 617 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_SIGNED);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 622 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_KW_UNSIGNED);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 627 "../src/parser/lexer.lxx"
{
	// Scoping operator
	accept();
	emit(TOKEN_OP_CONS);
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 633 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_OP_AND);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 638 "../src/parser/lexer.lxx"
{
	accept();
	emit(TOKEN_OP_STAR);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 643 "../src/parser/lexer.lxx"
{
	// Comment block
	accept();
	inputs.front()->comments.back() += scan_block_comment();
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 649 "../src/parser/lexer.lxx"
{
	// C++-style comment
	accept();
	inputs.front()->comments.back() += (cpp_yytext + 2);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 655 "../src/parser/lexer.lxx"
{
	// String literal (")
	accept();
	yylval.string = new string(scan_string_literal());
	emit(TOKEN_STRING);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 662 "../src/parser/lexer.lxx"
{
	// Character literal (')
	accept();
	yylval.character = read_char_const();
	if(peek_char() != '\'') {
		yyerror("Treesap doesn't support multi-character character constants.");
		scan_string_literal('\''); // Consome the rest of the characters
	}
	emit(TOKEN_CHAR);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 673 "../src/parser/lexer.lxx"
{
	// Boolean literal
	accept();
	if(strcmp(cpp_yytext, "true") == 0) {
		yylval.boolean = true;
	} else {
		yylval.boolean = false;
	}
	emit(TOKEN_BOOLEAN);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 684 "../src/parser/lexer.lxx"
{
	// Octal literal (currently we just accept 0)
	accept();
	yylval.integer = 0;
	emit(TOKEN_INTEGER);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 691 "../src/parser/lexer.lxx"
{
	// Decimal literal
	accept();
	yylval.integer = atoi(cpp_yytext);
	emit(TOKEN_INTEGER);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 698 "../src/parser/lexer.lxx"
{
	// Floating-point literals
	accept();
	yylval.floating = atof(cpp_yytext);
	emit(TOKEN_FLOAT);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 705 "../src/parser/lexer.lxx"
{
	accept();

	// Check if its a macro, and if it is, expand it
	string identifier(cpp_yytext);
	auto macro_it = macros.find(identifier);
	if(macro_it !=  macros.end()) {
		Macro macro = macro_it->second;
		if(macro.is_function) {
			yy_push_state(macro_start);
			current_macro.identifier = identifier;
			current_macro.arg_values.clear();
		} else if(!macro.replace_text.empty()) {
			Input* input = new Input("<macro> " + macro.identifier);
			inputs.push_front(input);

			input->is_macro = true;
			input->macro_value = macro.replace_text;
			FILE* f = fmemopen(&input->macro_value[0], input->macro_value.length(), "r");
			cpp_yypush_buffer_state(yy_new_buffer(f, input->macro_value.length() + 1));
		}
	}

	// Otherwise return it as an IDENTIFIER
	else {
		yylval.string = new string(cpp_yytext);
		emit(TOKEN_IDENTIFIER);
	}
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 735 "../src/parser/lexer.lxx"
{
	// Send any other printable character as itself.
	accept();
	emit(cpp_yytext[0]);
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(pragma):
case YY_STATE_EOF(include):
case YY_STATE_EOF(include_next):
case YY_STATE_EOF(ifdef):
case YY_STATE_EOF(ifndef):
case YY_STATE_EOF(define):
case YY_STATE_EOF(undef):
case YY_STATE_EOF(elseif):
case YY_STATE_EOF(endif):
case YY_STATE_EOF(ppr_warning):
case YY_STATE_EOF(ppr_error):
case YY_STATE_EOF(macro_start):
case YY_STATE_EOF(macro_args):
#line 741 "../src/parser/lexer.lxx"
{
	// Check for unclosed conditionals
	while(inputs.front()->condition_depth > 0) {
		if(inputs.front()->condition_depth > 8) {
			yyerror("8+ unclosed #if directives in file.");
			break;
		}
		yyerror("Missing #endif in current file.");
		inputs.front()->condition_depth--;
	}

	// Stop reading our current file
	cpp_yypop_buffer_state();

	// Check if we need to cleanup after a macro
	if(inputs.front()->is_macro) {
		delete inputs.front();		
	}
	inputs.pop_front();

	// Check if we have a file to return to (for example, after an #include)
	if(!YY_CURRENT_BUFFER) {
		// Check if we have inputs left in our queue
		if(inputs.empty()) {
			yyterminate();
		}

		cpp_yyin = fopen(inputs.front()->name.c_str(), "r");
		if(!cpp_yyin) {
			yyerror("Could not open file \"" + inputs.front()->name + "\" for scanning.");
			yyterminate();
		}

		cpp_yypush_buffer_state(yy_new_buffer(cpp_yyin, YY_BUF_SIZE));
	}
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 778 "../src/parser/lexer.lxx"
{
	// Eat whitespace and find opening paren
	accept();
	yy_pop_state(); // pop <macro_start>
	yy_push_state(macro_args); // push <macro_args>
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 785 "../src/parser/lexer.lxx"
{
	accept();
	yyerror("Unexpected character before opening paren '(' of macro-function.");
	yy_pop_state(); // pop <macro_start>
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 791 "../src/parser/lexer.lxx"
{
	// Eat whitespace
	accept();
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 796 "../src/parser/lexer.lxx"
{
	// Eat argument
	accept();
	current_macro.arg_values.push_back(current_value);
	current_value.clear();
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 803 "../src/parser/lexer.lxx"
{
	accept();
	current_macro.arg_values.push_back(current_value);
	current_value.clear();

	Macro* macro = &macros.find(current_macro.identifier)->second;
	size_t num_values = current_macro.arg_values.size();
	size_t num_params = macro->args.size();
	if(num_params != num_values) {
		string msg("Incorrect number of arguments for macro \"" + macro->identifier + "\".");
		yyerror(msg);
	} else { 
		string new_input = macro->replace_text;
		for(int i = 0; i < macro->args.size(); ++i) {
			new_input = replace_substr(new_input, macro->args[i], current_macro.arg_values[i]);
		}

		if(!new_input.empty()) {
	  		Input* input = new Input("<macro> " + macro->identifier);
			inputs.push_front(input);

			input->is_macro = true;
			input->macro_value = new_input;
			FILE* f = fmemopen(&input->macro_value[0], input->macro_value.length(), "r");
			cpp_yypush_buffer_state(yy_new_buffer(f, input->macro_value.length() + 1));
		}
	}
	current_macro.identifier.clear();
	current_macro.arg_values.clear();
	yy_pop_state(); // pop macro_args
}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 835 "../src/parser/lexer.lxx"
{
	// Error on newline
	accept();
	yyerror("Unexpected newline in call to function macro.");
	yyterminate();
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 842 "../src/parser/lexer.lxx"
{
	accept();
	current_value += cpp_yytext[0];
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 848 "../src/parser/lexer.lxx"
ECHO;
	YY_BREAK
#line 2139 "../src/parser/lexer.cxx"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cpp_yyin at a new source and called
			 * cpp_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cpp_yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cpp_yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cpp_yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cpp_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cpp_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cpp_yyrestart(cpp_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cpp_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 327 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 327 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 326);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cpp_yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cpp_yyrestart(cpp_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cpp_yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cpp_yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cpp_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cpp_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cpp_yy_create_buffer(cpp_yyin,YY_BUF_SIZE );
	}

	cpp_yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	cpp_yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cpp_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cpp_yypop_buffer_state();
	 *		cpp_yypush_buffer_state(new_buffer);
     */
	cpp_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cpp_yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cpp_yywrap()) processing, but the only time this flag
	 * is looked at is after cpp_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cpp_yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cpp_yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cpp_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cpp_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cpp_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cpp_yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cpp_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	cpp_yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cpp_yy_create_buffer()
 * 
 */
    void cpp_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cpp_yyfree((void *) b->yy_ch_buf  );

	cpp_yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cpp_yyrestart() or at EOF.
 */
    static void cpp_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cpp_yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cpp_yy_init_buffer was _probably_
     * called from cpp_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cpp_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cpp_yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cpp_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cpp_yyensure_buffer_stack();

	/* This block is copied from cpp_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cpp_yy_switch_to_buffer. */
	cpp_yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cpp_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cpp_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cpp_yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cpp_yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cpp_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cpp_yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cpp_yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cpp_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cpp_yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cpp_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cpp_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cpp_yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cpp_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cpp_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE cpp_yy_scan_string (yyconst char * yystr )
{
    
	return cpp_yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cpp_yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cpp_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cpp_yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cpp_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cpp_yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cpp_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) cpp_yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) cpp_yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cpp_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cpp_yytext[cpp_yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = cpp_yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cpp_yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cpp_yyget_lineno  (void)
{
        
    return cpp_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *cpp_yyget_in  (void)
{
        return cpp_yyin;
}

/** Get the output stream.
 * 
 */
FILE *cpp_yyget_out  (void)
{
        return cpp_yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t cpp_yyget_leng  (void)
{
        return cpp_yyleng;
}

/** Get the current token.
 * 
 */

char *cpp_yyget_text  (void)
{
        return cpp_yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cpp_yyset_lineno (int  line_number )
{
    
    cpp_yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cpp_yy_switch_to_buffer
 */
void cpp_yyset_in (FILE *  in_str )
{
        cpp_yyin = in_str ;
}

void cpp_yyset_out (FILE *  out_str )
{
        cpp_yyout = out_str ;
}

int cpp_yyget_debug  (void)
{
        return cpp_yy_flex_debug;
}

void cpp_yyset_debug (int  bdebug )
{
        cpp_yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cpp_yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    cpp_yyin = stdin;
    cpp_yyout = stdout;
#else
    cpp_yyin = (FILE *) 0;
    cpp_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cpp_yylex_init()
     */
    return 0;
}

/* cpp_yylex_destroy is for both reentrant and non-reentrant scanners. */
int cpp_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cpp_yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cpp_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	cpp_yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        cpp_yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cpp_yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cpp_yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cpp_yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cpp_yyfree (void * ptr )
{
	free( (char *) ptr );	/* see cpp_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 848 "../src/parser/lexer.lxx"



// accept is called above as each piece is pulled off and
// accepted by the lexer; it increments the current column number.
static void accept() {
	yylloc.file = inputs.front();
	yylloc.first_line = inputs.front()->line_number;
	yylloc.first_column = inputs.front()->col_number;
	inputs.front()->col_number += cpp_yyleng;
}

// peek_char returns the character that will be returned by read_char next.
inline int peek_char()
{
	int c = yyinput();
	unput(c);
	return c;
}

// read_char reads and returns a single character,
//     incrementing the line and column numbers as appropriate.
inline int read_char() {
	return read_char(inputs.front()->line_number, inputs.front()->col_number);
}
static int read_char(int & line, int & col) {
	int c = yyinput();
	if (c == '\n') {
		line++;
		col = 0;
	} else {
		col++;
	}
	return c;
}

inline char read_char_const(bool auto_escape) {
	return read_char_const(inputs.front()->line_number, inputs.front()->col_number, auto_escape);
}
static char read_char_const(int & line, int & col, bool auto_escape) {
	int c;

	if(!auto_escape) { c = '\\'; }
	else { c = read_char(line, col); }

	if(c != '\\') { return c; }

	// Handle escape sequence
	c = read_char(line, col);
	switch(c) {
		case 'a':
			return '\a';
		case 'b':
			return '\b';
		case 'f':
			return '\f';
		case 'n':
			return '\n';
		case 'r':
			return '\r';
		case 't':
			return '\t';
		case 'v':
			return '\v';
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		{
			int oct = (c - '0'); // integer value

			c = peek_char();
			if(c < '0' || c > '7') { return oct; }
			for(int i = 0; i < 2; ++i) {
				read_char(line, col);
				oct = oct * 8 + (c - '0');

				c = peek_char();
				if(c < '0' || c > '7') { return oct; }
			}
			if(oct > 255) {
				yyerror("Octal escape sequence out of range.");
			}
			return (char)oct;
		}
		case 'x':
		{
			int hex = 0;

			c = peek_char();
			if(!isxdigit(c)) { return hex; }
			for(int i = 0; i < 2; i++) {
				read_char(line, col);
				hex = hex * 16 + (isdigit(c) ? (c - '0') : tolower(c) - 'a' + 10);

				c = peek_char();
				if(!isxdigit(c)) { return hex; }
			}
			return (char)hex;
		}
		case 'u':
			yyerror("Treesap hasn't implement unicode escape sequences yet!");
			return 'u';
		default:
			return c;
	}
}

static void eat_space() {
	int c = peek_char();
	while(isblank(c)) {
		read_char();
		c = peek_char();
	}
}

static void scan_define(const string& identifier) {
	Macro def(identifier, Location(inputs.front()));

	int c = peek_char();
	if(c == '(') {
		read_char();
		def.is_function = true;

		// Read function macro
		string arg;
		c = read_char();
		while(c != EOF) {
			if(c == ',') {
				if(arg.empty()) {
					yywarning("Found extra ',' character in macro definition.");
				}

				def.args.push_back(arg);
				arg = "";
			} else if(c == ')') {
				if(arg.empty() && def.args.size() > 0) {
					yywarning("Found extra ',' character in macro definition.");
				}

				def.args.push_back(arg);
				break;
			} else if(c == '\n') {
				yyerror("Found newline in function macro definition.");
				unput(c);
				return;
			} else if(isalnum(c) || c == '_') {
				arg += c;
			} else if(!isblank(c)) {
				string msg;
				msg += "Found unexpeced character '";
				msg += c;
				msg += "' in argument for macro definition.";
				yyerror(msg);
			}
			c = read_char();
		}

		if(c == EOF) {
			yyerror("Unexpected EOF in function macro definition.");
			unput(c);
			return;
		}
	}

	eat_space();

	// Read value for macro
	string replace;
	c = peek_char();
	while(c != EOF && c != '\n') {
		read_char();
		int p = peek_char();
		if(c == '\\' && p == '\n') {
			replace += read_char();
		} else {
			replace += c;
		}

		c = peek_char();
	}

	def.replace_text = replace;
	macros.emplace(identifier, def);
}

static string scan_if() {
	string result;
	int c = read_char();
	while(c != EOF && c != '\n') {
		if(c == '\\' && peek_char() == '\n') {
			c = read_char();
		}

		result += c;
		c = read_char();
	}

	return result;
}

static string scan_block_comment() {
	// We don't touch the current line number and column number during
	// scanning, so that if we detect a warning while scanning the comment
	// (e.g. an unterminated block comment), we'll report the warning as
	// occurring at the start of the comment, not at the end--somewhat
	// more convenient for the user.
	string result;
	int line = inputs.front()->line_number;
	int col = inputs.front()->col_number;

	int c = read_char(line, col);
	while(c != EOF) {
		if(c == '*' && peek_char() == '/') { break; }
		c = read_char(line, col);
	}

	if(c == EOF) {
		yyerror("Block comment is missing a terminating \"*/\"."); 
	} else {
		read_char(line, col); // consume '/' following the '*'
	}

	inputs.front()->line_number = line;
	inputs.front()->col_number = line;

	return result;
}

static string scan_string_literal(char quote_mark) {
	// We don't touch the current line number and column number during
	// scanning, so that if we detect an error while scanning the string
	// (e.g. an unterminated string), we'll report the error as
	// occurring at the start of the string, not at the end--somewhat
	// more convenient for the user.
	string result;
	int line = inputs.front()->line_number;
	int col = inputs.front()->col_number;

	int c = read_char(line, col);
	while(c != quote_mark && c != EOF) {
		// A newline is not allowed within a string unless it is escaped.
		if(c == '\n') {
			c = EOF;
			break;
		}

		if(c == '\\') {
			result += read_char_const(line, col, true);
		} else {
			result += c;
		}

		c = read_char(line, col);
	}

	if(c == EOF)
	{
		yyerror("String const is missing a terminating (\") character."); 
	}

	inputs.front()->line_number = line;
	inputs.front()->col_number = line;

	return result;
}

static bool accept_include(char end_mark, bool next) {
	// Get the string between the quotes
	string filename;
	int line = inputs.front()->line_number;
	int col = inputs.front()->col_number;

	int c = read_char(line, col);
	while(c != end_mark && c != EOF) {
		filename += c;
		c = read_char(line, col);
	}

	if(c == EOF) {
		string msg = "#include filename missing a terminating (";
		yyerror(msg + "\") character.");
		return false;
	}

	if(filename.empty()) {
		yyerror("#include must be given a filename.");
		return false;
	}

	string prevdir;
	bool found_prev = false;
	if(next && prev_include_dir.find(filename) != prev_include_dir.end()) {
		prevdir = prev_include_dir.find(filename)->second;
	}
	if(prevdir == "") { found_prev = true; }

	string fileref;
	vector<string> dirs;
	if(end_mark == '\"' && (!next || found_prev)) {
		cpp_yyin = fopen(filename.c_str(), "r");
		if(cpp_yyin) {
			prev_include_dir.emplace(filename, ".");
			fileref = filename;
			goto eatline;
		}
	}

	if(prevdir == ".") { found_prev = true; }
	dirs = get_compiler_includes();
	for(auto it = dirs.begin(); it != dirs.end(); ++it) {
		if(next) {
			if(!found_prev) {
				if(prevdir == (*it)) {
					found_prev = true;
				}
				continue;
			}
		}

		string filepath = (*it) + filename;
		cpp_yyin = fopen(filepath.c_str(), "r");
		if(cpp_yyin) {
			prev_include_dir.emplace(filename, *it);
			fileref = filepath;
			goto eatline;
		}
	}

	if(!cpp_yyin) {
		yyerror("Could not open file " + filename + " for scanning.");
		return false;
	}

  eatline:
	inputs.front()->line_number = line;
	inputs.front()->col_number = col;

	c = peek_char();
	while(c != EOF && c != '\n') {
		read_char();
		switch(c) {
			case ' ':
			case '\t':
				// Eat any whitespace
				break;
			case '/':
				// Ignore comments
				goto stop;
			default:
				yywarning("Junk characters after #include.");
				goto stop;
		}
		c = peek_char();
	}

  stop:
  	cout << "Included: " << fileref << ".\n";
  	auto prev_include = files.find(fileref);
  	if(prev_include != files.end()) {
  		if(prev_include->second->type != FTInput) {
  			yyerror("Name conflict with included file.");
  			return false;
  		}

  		Input* input = (Input*)(prev_include->second);
  		inputs.push_front(input);
  		input->times_included++;
  	} else {
  		Input* input = new Input(fileref);
		inputs.push_front(input);
		files.emplace(input->name, input);  		
  	}

	// Switch to the new buffer
	cpp_yypush_buffer_state(yy_new_buffer(cpp_yyin, YY_BUF_SIZE));
	return true;
}

static ostream& indent(ostream& out, unsigned int indent_level) {
	for(unsigned int i = 0; i < indent_level; i++) {
		out << ' ';
	}
	return out;
}

static string replace_substr(string orig, string substr, string replace) {
	string result;
	size_t find = 0;
	size_t end = orig.find(substr, find);
	while(true) {
		result += orig.substr(0, end);
		result += replace;
		find = result.length();
		result += orig.substr(end + substr.length());

		end = result.find(substr, find);
		if(end == string::npos) {
			break;
		} else {
			orig = result;
			result = "";
		}
		result = "";
	}
	return result;
}

Module* init_lexer(const string & filename) {
	error_count = 0;
	warning_count = 0;

	current_module = new Module();

	macros.clear();
	vector<Macro> predefines = get_compiler_defines();
	for(auto it = predefines.begin(); it != predefines.end(); ++it) {
		macros.emplace(it->identifier, (*it));
	}

	inputs.clear();
	Input* input = new Input(filename);
	inputs.push_front(input);
	files.emplace(filename, input);

	cpp_yyout = fopen("/dev/null", "w");
	cpp_yyin = fopen(filename.c_str(), "r");
	if(!cpp_yyin) { return NULL; }
	return current_module;
}

int cpp_yyerrors() { return error_count; }
int cpp_yywarnings() { return warning_count; }
void cpp_yyerror(const string & msg)
{
	Input* info = inputs.front();

	cerr << "Error";
	if(!info->name.empty()) {
		cerr << " in " << info->name;
	}
	cerr << " at line " << info->line_number << ", column " << info->col_number
	     << ":\n" << info->current_line << "\n";

	int ident = info->col_number - 1 < 0 ? 0 : info->col_number - 1;
	if(ident > 100) { ident = 100; }
	indent(cerr, ident) << "^\n";
	cerr << msg << "\n\n";

	error_count++;
}
void cpp_yywarning(const string & msg)
{
	Input* info = inputs.front();

	cerr << "\nWarning";
	if(!info->name.empty()) {
		cerr << " in " << info->name;
	}
	cerr << " at line " << info->line_number << ", column " << info->col_number
	     << ":\n" << info->current_line << "\n";

	int ident = info->col_number - 1 < 0 ? 0 : info->col_number - 1;
	if(ident > 100) { ident = 100; }
	indent(cerr, ident) << "^\n";
	cerr << msg << "\n\n";

	warning_count++;
}

Input::Input(const string& name) : File(name, FTInput),
	line_number(1), col_number(0), times_included(1), condition_depth(0), is_macro(0) {
	comments.push_back(string());
}

