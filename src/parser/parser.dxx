/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Skeleton interface for Bison GLR parsers in C

   Copyright (C) 2002-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

#ifndef YY_CPP_YY_SRC_PARSER_PARSER_DXX_INCLUDED
# define YY_CPP_YY_SRC_PARSER_PARSER_DXX_INCLUDED
/* Debug traces.  */
#ifndef CPP_YYDEBUG
# if defined YYDEBUG
#if YYDEBUG
#   define CPP_YYDEBUG 1
#  else
#   define CPP_YYDEBUG 0
#  endif
# else /* ! defined YYDEBUG */
#  define CPP_YYDEBUG 0
# endif /* ! defined YYDEBUG */
#endif  /* ! defined CPP_YYDEBUG */
#if CPP_YYDEBUG
extern int cpp_yydebug;
#endif

/* Token type.  */
#ifndef CPP_YYTOKENTYPE
# define CPP_YYTOKENTYPE
  enum cpp_yytokentype
  {
    TOKEN_END = 0,
    TOKEN_INTEGER = 258,
    TOKEN_FLOAT = 259,
    TOKEN_STRING = 260,
    TOKEN_CHAR = 261,
    TOKEN_BOOLEAN = 262,
    TOKEN_IDENTIFIER = 263,
    TOKEN_KW_NAMESPACE = 264,
    TOKEN_KW_PUBLIC = 265,
    TOKEN_KW_PROTECTED = 266,
    TOKEN_KW_PRIVATE = 267,
    TOKEN_KW_ENUM = 268,
    TOKEN_KW_STRUCT = 269,
    TOKEN_KW_CLASS = 270,
    TOKEN_KW_TYPEDEF = 271,
    TOKEN_KW_INT = 272,
    TOKEN_KW_CHAR = 273,
    TOKEN_KW_DOUBLE = 274,
    TOKEN_KW_UNSIGNED = 275,
    TOKEN_KW_SIGNED = 276,
    TOKEN_KW_LONG = 277,
    TOKEN_KW_SHORT = 278,
    TOKEN_OP_CONS = 279,
    TOKEN_OP_AND = 280,
    TOKEN_OP_STAR = 281
  };
#endif

/* Value type.  */
#if ! defined CPP_YYSTYPE && ! defined CPP_YYSTYPE_IS_DECLARED
typedef union CPP_YYSTYPE CPP_YYSTYPE;
union CPP_YYSTYPE
{
#line 26 "../src/parser/parser.yxx" /* glr.c:2555  */

	int integer;
	bool boolean;
	char character;
	double floating;
	std::string* string;

#line 98 "../src/parser/parser.dxx" /* glr.c:2555  */
};
# define CPP_YYSTYPE_IS_TRIVIAL 1
# define CPP_YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined CPP_YYLTYPE && ! defined CPP_YYLTYPE_IS_DECLARED
typedef struct CPP_YYLTYPE CPP_YYLTYPE;
struct CPP_YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define CPP_YYLTYPE_IS_DECLARED 1
# define CPP_YYLTYPE_IS_TRIVIAL 1
#endif


extern CPP_YYSTYPE cpp_yylval;
extern CPP_YYLTYPE cpp_yylloc;
int cpp_yyparse (void);

#endif /* !YY_CPP_YY_SRC_PARSER_PARSER_DXX_INCLUDED  */
