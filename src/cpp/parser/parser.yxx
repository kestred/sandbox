/* Filename: parser.yxx */

%{
	#include "parser.h"
	#include "tokens.h"
	#include "lexer.h"

	#include "cpp/cpp.h"
	#include <stack>

	#define yyerror cpperror
	#define yywarning cppwarning

	using namespace std;

	static string current_error;

	static Module* module = NULL;
	static File* current_file = NULL;
	static Scope* file_scope = NULL;
	static stack<Scope*> scopes;
	#define local_scope scopes.top()

	// is_varname_free returns true if a provided identifier is not used as a
	//     symbol or can be masked as a varname in a provided scope.
	static bool is_varname_free(const string& name, Scope* scope);

	// is_typename_free returns true if a provided identifier is not used as a
	//     symbol or can be masked as a typename in a provided scope.
	static bool is_typename_free(const string& name, Scope* scope);

	// resolve_qualified finds the scope associated with the name
	//     that is visible from the provided scope.
	//     For example, "foo::bar::baz" would return the scope "bar"
	//     in which the variable baz is expected to be found.
	static Scope* resolve_qualified(QualifiedName* name, Scope* scope);

	// get_variable returns a pointer to the variable visible in a provided
	//     scope with a provided name. Returns NULL if no such variable exists.
	static Variable* get_variable(const string& name, Scope* scope);
	static Variable* get_variable(QualifiedName* name, Scope* scope);

	// get_type returns a pointer to the type visible in a provided scope
	//     with a provided name. Returns NULL if no such type exists.
	static Type* get_type(const string& name, Scope* scope);
	static Type* get_type(QualifiedName* name, Scope* scope);

	// get_namespace returns a pointer to the namespace visible in a provided
	//     scope with a provided name. Returns NULL if no such namespace exists.
	static Scope* get_namespace(const string& name, Scope* scope);

	// print_type_error returns a human readable type-error explanation.
	static string print_type_error(Subtype expected, Subtype received);

	// print_location returns a human readable string representing the given location.
	static string print_location(const Location& loc);
	static string print_location(const Location* loc);
%}

/* Set Parser Options */
%glr-parser    // using glr so we can allow some conflicts in ambiguous C++ grammar
%error-verbose // has bison output verbose errors
%locations     // enable location tracking; we use this to pair comments with tokens
%define parse.trace

//%define api.namespace {treesap}
%define api.prefix {cpp}
%define api.token.prefix {TOKEN_} // prefix tokens with TOKEN_ to avoid name conflicts

/* Lexing Symbols */
%token END 0 "end of file" // error messages refer to "end of file" intead of $end

/* Literal Tokens */
%token <integer>   INTEGER
%token <floating>  FLOAT
%token <string>    STRING
%token <character> CHAR
%token <boolean>   BOOLEAN

/* Semantic Tokens */
%token <string> IDENTIFIER

/* Keyword Tokens */
%token KW_NAMESPACE "namespace"
%token KW_CONST     "const"

// Access specifiers
%token KW_PUBLIC    "public"
%token KW_PROTECTED "protected"
%token KW_PRIVATE   "private"

// Type-definitions
%token KW_ENUM     "enum"
%token KW_STRUCT   "struct"
%token KW_CLASS    "class"
%token KW_TYPEDEF  "typedef"
%token KW_TYPENAME "typename"
%token KW_TEMPLATE "template"

// Fundamental-type keywords
%token KW_INT      "int"
%token KW_FLOAT    "float"
%token KW_DOUBLE   "double"
%token KW_UNSIGNED "unsigned"
%token KW_SIGNED   "signed"
%token KW_LONG     "long"
%token KW_SHORT    "short"
%token KW_CHAR     "char"
%token KW_CHAR16_T "char16_t"
%token KW_CHAR32_T "char32_t"
%token KW_WCHAR_T  "wchar_t"
%token KW_BOOL     "bool"
%token KW_VOID     "void"

// Compiler directives
%token KW_ATTRIBUTE "__attribute__"
%token ATTR_VISIBILITY "__visibility__"
%token ATTR_NORETURN "__noreturn__"

// Keyword-operators
%token KW_SIZEOF   "sizeof"
%token KW_DECLTYPE "decltype"

/* Operator Tokens */
%token OP_ASSIGN  "="
%token OP_EQUALS  "=="

// We're naming most ops by their symbol, because they're overload
%token OP_CONS    "::"
%token OP_ANDAND  "&&"
%token OP_AND     "&"
%token OP_BARBAR  "||"
%token OP_BAR     "|"
%token OP_STAR    "*"
%token OP_ANGLE_L "<"
%token OP_ANGLE_R ">"

/* Precedence */
%left ','
%right "throw"
%right "?:" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|="
%left "||"
%left "&&"
%left "|"
%left "^"
%left "&"
%left "==" "!="
%left "<" "<=" ">" ">="
%left "<<" ">>"
%right "+" "-"
%right "*" "/" "%"
%right "!" "~"  '(' ')' "new" "new[]" "delete" "delete[]" "sizeof"
%left "()" '[' ']' '.' "->"
%left "::"

/* Non-terminals */
%type <string> class_identifier
%type <string> struct_identifier
%type <name> qualified_name
%type <name> existing_variable_identifier

%type <template_type> template_declaration


/* Destructors */
/*
%destructor {} END
%destructor { delete($$); } <string>
%destructor { delete($$); } <name>
*/


%%

cxx : empty
	| declarations
	| error ';'
	{
		if(!current_error.empty()) {
			yyerror(current_error);
			current_error.clear();
		}
	}
	;

declarations
	: declaration
	| declarations declaration
	;

declaration
	: namespace_declaration
	| method_definition
	| method_declaration ';'
	| enum_declaration ';'
	| class_declaration ';'
	| struct_declaration ';'
	| template_declaration ';'
	| template_definition ';'
	| template_specialization ';'
	| template_spec_definition ';'
	| typedef_declaration ';'
	| variable_declaration ';'
	;

statements
	: statement
	| statements statement
	;

statement
	: expression ';'
	;

expression
	: existing_variable_identifier
	| raw_value
	| boolean_value
	| cast_value
	| type_initializer
	| '(' expression ')'
	;

boolean_value
	: expression "==" expression
	| expression "!=" expression
	| expression "<=" expression
	| expression ">=" expression
	| expression "<" expression
	| expression ">" expression
	| expression "||" expression
	| expression "&&" expression
	| "!" expression
	;

type_initializer
	: type_name '(' argument_list ')'
	| "new" type_name '(' argument_list ')'
	;

cast_value
	: '(' type_name type_reference ')' expression
	;

argument_list
	: expression
	| argument_list ',' expression
	;

class_body
	: class_part
	| class_body class_part
	;

class_part
	: declaration
	| access_specifier
	;

access_specifier
	: "public" ':'
	| "protected" ':'
	| "private" ':'
	;

enum_declaration
	: "enum" IDENTIFIER '{' '}'
	| "enum" IDENTIFIER '{' enumeration '}'
	| "enum" '{' enumeration '}'
	;

enumeration
	: enum_element
	| enumeration ',' enum_element
	;

enum_element
	: IDENTIFIER
	| IDENTIFIER "=" expression
	;

variable_declaration
	: variable_single_declaration
	| variable_declaration ',' variable_expression
	| variable_declaration ',' variable_initialization
	;

variable_single_declaration
	: type_name variable_expression
	| type_name variable_initialization
	;

variable_parameter
	: type_name type_reference
	| type_name variable_expression
	| type_name variable_initialization
	;

variable_expression
	: type_reference IDENTIFIER
	;

variable_initialization
	: variable_expression '=' expression
	;

class_declaration
	: class_identifier         // declaration
	| class_identifier '{' '}' // definition
	{
		string name = *$1;

		Type* prev = get_type(name, local_scope);
		if(prev == NULL) {
			current_error = "TODO: class definition without declaration";
			YYERROR;
		}

		if(prev->definition != NULL) {
			current_error = "Redefinition of 'class " + name + "'.\n"
				+ "\n\tPreviously defined: " + print_location(prev->definition) + "\n";
			YYERROR;
		}

		// TODO: Define class
	}
	| class_identifier '{' class_body '}'
	{
		string name = *$1;

		Type* prev = get_type(name, local_scope);
		if(prev == NULL) {
			current_error = "TODO: class definition without declaration";
			YYERROR;
		}

		if(prev->definition != NULL) {
			current_error = "Redefinition of 'class " + name + "'.\n"
				+ "\n\tPreviously defined: " + print_location(prev->definition) + "\n";
			YYERROR;
		}

		// TODO: Define class
	}
	;

class_identifier
	: "class" IDENTIFIER
	{
		string name = *$2;
		Type* prev = get_type(name, local_scope);
		if(prev != NULL) {
			if(prev->subtype != CLASS_SUBTYPE) {
				current_error = "'class " + name + '\''
				                + print_type_error(prev->subtype, CLASS_SUBTYPE)
					            + "\n\tFirst declared: "
					            + print_location(prev->declarations.front()) + "\n";
				YYERROR;
			}
			prev->declarations.push_back(yylloc);

		} else if(is_typename_free(name, local_scope)) {
			local_scope->types[name] = Type(name, CLASS_SUBTYPE);
			local_scope->types[name].declarations.push_back(yylloc);

		} else {
			current_error = "TODO: name for class has conflict";
			YYERROR;
		}

		$$ = $2;
	}
	;

struct_declaration
	: struct_identifier         // declaration
	| struct_identifier '{' '}' // definition
	{
		string name = *$1;

		Type* prev = get_type(name, local_scope);
		if(prev == NULL) {
			current_error = "TODO: struct definition without declaration";
			YYERROR;
		}

		if(prev->definition != NULL) {
			current_error = "Redefinition of 'struct " + name + "'.\n"
				+ "\n\tPreviously defined: " + print_location(prev->definition) + "\n";
			YYERROR;
		}

		// TODO: Define class
	}
	| struct_identifier '{' class_body '}'
	{
		string name = *$1;

		Type* prev = get_type(name, local_scope);
		if(prev == NULL) {
			current_error = "TODO: struct definition without declaration";
			YYERROR;
		}

		if(prev->definition != NULL) {
			current_error = "Redefinition of 'struct " + name + "'.\n"
				+ "\n\tPreviously defined: " + print_location(prev->definition) + "\n";
			YYERROR;
		}

		// TODO: Define class
	}
	;

struct_identifier
	: "struct" IDENTIFIER
	{
		string name = *$2;
		Type* prev = get_type(name, local_scope);
		if(prev != NULL) {
			if(prev->subtype != CLASS_SUBTYPE) {
				current_error = "'struct " + name + '\''
				                + print_type_error(prev->subtype, CLASS_SUBTYPE)
					            + "\n\tFirst declared: "
					            + print_location(prev->declarations.front()) + "\n";
				YYERROR;
			}
			prev->declarations.push_back(yylloc);

		} else if(is_typename_free(name, local_scope)) {
			local_scope->types[name] = Type(name, CLASS_SUBTYPE);
			local_scope->types[name].declarations.push_back(yylloc);

		} else {
			current_error = "TODO: name for struct has conflict";
			YYERROR;
		}

		$$ = $2;
	}
	;

start_template_scope
	: "template" "<" { scopes.push(new Scope(local_scope, TEMPLATE_SCOPE)); }
	;

template_declaration
	: start_template_scope template_argument_list ">" "class" IDENTIFIER
	{
		Scope* template_scope = local_scope;
		scopes.pop();

		string name = *$5;
		Type* type = get_type(name, local_scope);
		if(type != NULL) {
			if(type->subtype != TEMPLATE_SUBTYPE) {
				current_error = "'template<...> class " + name + '\''
				                + print_type_error(type->subtype, CLASS_SUBTYPE)
				                + "\n\tFirst declared: "
				                + print_location(type->declarations.front()) + "\n";
				YYERROR;
			}

			/*
			Template* templ = get_template(name, local_scope);
			size_t expected_args = templ->scope->types.size();
			size_t received_args = template_scope->types.size();
			if(expected_args != received_args) {
				current_error = "TODO: num template args is different";
				delete template_scope;
				YYERROR;
			}
			*/

			// TODO: Test default template argument equivilance

			type->declarations.push_back(yylloc);

			$$ = type->as_template();

		} else if(is_typename_free(name, local_scope)) {
			local_scope->types[name] = Type(name, TEMPLATE_SUBTYPE);
			local_scope->types[name].declarations.push_back(yylloc);
			local_scope->types[name].scope = template_scope;
			$$ = local_scope->types[name].as_template();
		} else {
			current_error = "TODO: name for template class has conflict";
			YYERROR;
		}
	}
	| start_template_scope template_argument_list ">" "struct" IDENTIFIER
	{
		Scope* template_scope = local_scope;
		scopes.pop();

		string name = *$5;
		Type* type = get_type(name, local_scope);
		if(type != NULL) {
			if(type->subtype != TEMPLATE_SUBTYPE) {
				current_error = "'template<...> class " + name + '\''
				                + print_type_error(type->subtype, CLASS_SUBTYPE)
				                + "\n\tFirst declared: "
				                + print_location(type->declarations.front()) + "\n";
				YYERROR;
			}

			/*
			Template* templ = get_template(name, local_scope);
			size_t expected_args = templ->scope->types.size();
			size_t received_args = template_scope->types.size();
			if(expected_args != received_args) {
				current_error = "TODO: num template args is different";
				delete template_scope;
				YYERROR;
			}
			*/

			// TODO: Test default template argument equivilance

			type->declarations.push_back(yylloc);

			$$ = type->as_template();

		} else if(is_typename_free(name, local_scope)) {
			local_scope->types[name] = Type(name, TEMPLATE_SUBTYPE);
			local_scope->types[name].declarations.push_back(yylloc);
			local_scope->types[name].scope = template_scope;
			$$ = local_scope->types[name].as_template();
		} else {
			current_error = "TODO: name for template class has conflict";
			YYERROR;
		}
	}
	;

template_definition
	: template_declaration '{' '}'
	| template_declaration '{'
	{
		if($1 != NULL) { scopes.push($1->scope); }
	}
	  class_body '}'
	{
		if($1 != NULL) { scopes.pop(); }
	}
	;

template_specialization
	: "template" "<" ">" "class" template_instance_type
	| "template" "<" ">" "struct" template_instance_type
	;

template_spec_definition
	: template_specialization '{' '}'
	| template_specialization '{' class_body '}'
	;

template_argument_list
	: template_argument
	| template_argument_list ',' template_argument
	;

template_argument
	: template_type_argument
	| template_type_argument "=" type_name
	| template_declaration
	| template_declaration "=" type_name
	| variable_parameter
	;

template_type_argument
	: "class"
	{
		string name = get_internal_identifier(local_scope);
		local_scope->types[name] = Type(name, DEFERRED_SUBTYPE);
		local_scope->types[name].declarations.push_back(yylloc);
	}
	| "typename"
	{
		string name = get_internal_identifier(local_scope);
		local_scope->types[name] = Type(name, DEFERRED_SUBTYPE);
		local_scope->types[name].declarations.push_back(yylloc);
	}
	| "class" IDENTIFIER
	{
		string name = *$2;
		local_scope->types[name] = Type(name, DEFERRED_SUBTYPE);
		local_scope->types[name].declarations.push_back(yylloc);
	}
	| "typename" IDENTIFIER
	{
		string name = *$2;
		local_scope->types[name] = Type(name, DEFERRED_SUBTYPE);
		local_scope->types[name].declarations.push_back(yylloc);
	}
	;

template_instance_type
	: existing_type_identifier "<" type_list ">"
	| existing_type_identifier "<" raw_value_list ">"
	;

typedef_declaration
	: "typedef" type_name variable_expression
	;

namespace_declaration
	: "namespace" attribute_directive '{' '}'
	| "namespace" attribute_directive '{' declarations '}'
	| "namespace" IDENTIFIER attribute_directive '{' '}'
	| "namespace" IDENTIFIER attribute_directive '{' declarations '}'
	;

method_declaration
	: method_base attribute_directive
	;

method_base
	: type_name variable_expression '(' ')'
	| type_name variable_expression '(' method_params ')'
	;

method_definition
	: method_base method_body
	;

method_params
	: variable_parameter
	| method_params ',' variable_parameter
	;

attribute_directive
	: empty
	| "__attribute__" '(' '(' attribute_list ')' ')'
	;

attribute_list
	: compiler_attribute 
	| attribute_list ',' compiler_attribute
	;

compiler_attribute
	: "__visibility__" '(' STRING ')'
	| "__noreturn__"
	;

method_body
	: '{' '}'
	| '{' statements '}'
	;

existing_variable_identifier
	: IDENTIFIER
	{
		if(get_variable(*$1, local_scope) == NULL) {
			current_error = "TODO: identifier is not a variable";
			YYERROR;
		}
	}
	| qualified_name
	{
		if(get_variable($1, local_scope) == NULL) {
			current_error = "TODO: qualified_name is not a variable";
			YYERROR;
		}

		$$ = $1;
	}
	;

type_name
	: "void"
	| "bool"
	| integer_type
	| float_type
	| existing_type_identifier
	| type_const_name
	| template_instance_type
	| "decltype" '(' IDENTIFIER ')'
	;

type_reference
	: empty
	| "&"
	| "*" type_reference
	;

existing_type_identifier
	: IDENTIFIER
	{
		if(get_type(*$1, local_scope) == NULL) {
			current_error = "'" + *$1 + "' doesn't name a type";
			YYERROR;
		}
	}
	| qualified_name
	{
		if(get_type($1, local_scope) == NULL) {
			current_error = "TODO: qualified_name is not a type";
			YYERROR;
		}
	}
	;

/*
nested_type_specifier
	: "typename" IDENTIFIER
	{
		if(get_type(*$2, local_scope) == NULL) {
			current_error = "TODO: identifier is not a type";
			YYERROR;
		}
	}
	| "typename" qualified_name
	{
		if(get_type($2, local_scope) == NULL) {
			current_error = "TODO: qualified_name is not a type";
			YYERROR;
		}
	}
	;
*/

type_const_name
	: "const" integer_type
	| "const" float_type
	| "const" existing_type_identifier
	| "const" template_instance_type
	;

type_list
	: type_name
	| type_list ',' type_name
	;

raw_value_list
	: raw_value
	| raw_value ',' raw_value_list
	;

raw_value
	: BOOLEAN
	| INTEGER
	| FLOAT
	| CHAR
	| STRING
	;

// For this rule, we'll allow almost everything in the grammar, but manually
//     check to make sure the user isn't insane.
integer_type
	: "char"
	| "char16_t"
	| "char32_t"
	| "wchar_t"
	| "short"
	| "long"
	| "int"
	| "unsigned"
	| "signed"
	| integer_type "char"
	| integer_type "char16_t"
	| integer_type "char32_t"
	| integer_type "wchar_t"
	| integer_type "short"
	| integer_type "long"
	| integer_type "int"
	| integer_type "unsigned"
	| integer_type "signed"
	;

float_type
	: "float"
	| "double"
	| "long" "double"
	;

qualified_name
	: IDENTIFIER "::" IDENTIFIER
	{
		$$ = new QualifiedName(*$1);
		$$->names.push_back(*$3);
	}
	| qualified_name "::" IDENTIFIER
	{
		$1->names.push_back(*$3);
		$$ = $1;
	}
	;

/*
string_literal
	: STRING
	| string_literal STRING
	;
*/

empty
	:
	;

%%

/* ---- API Subroutines ---- */
Module* run_parser(const string & filename) {
	module = init_lexer(filename);
	if(!module) { return NULL; }
	current_file = module->files[filename];
	file_scope = &current_file->scope;
	scopes = stack<Scope*>();
	scopes.push(file_scope);
	if(yyparse() != 0 || cpp_errors() > 0) { return NULL; }
	return module;
}
Module* run_parser(const string & filename, FILE* file) {
	module = init_lexer(filename, file);
	if(!module) { return NULL; }
	current_file = module->files[filename];
	file_scope = &current_file->scope;
	scopes = stack<Scope*>();
	scopes.push(file_scope);
	if(yyparse() != 0 || cpp_errors() > 0) { return NULL; }
	return module;
}

void cpp_parser_file(File* file) {
	current_file = file;
	file_scope = &current_file->scope;
}

/* --- Helper Subroutines --- */
bool is_varname_free(const string& name, Scope* scope) {
	// Check if a similar variable exists in the same scope.
	//     We can mask outer scopes, so we don't have to check them.
	if(scope->variables.find(name) != scope->variables.end()) {
		return false;
	}

	// Namespace names conflict with variable names.
	if(scope->namespaces.find(name) != scope->namespaces.end()) {
		return false;
	}

	return true;
}

bool is_typename_free(const string& name, Scope* scope) {
	// Check if a similar type exists in the same scope.
	//     We can mask outer scopes, so we don't have to check them.
	if(scope->types.find(name) != scope->types.end()) {
		return false;
	}

	// Namespace names conflict with type names.
	if(scope->namespaces.find(name) != scope->namespaces.end()) {
		return false;
	}

	return true;
}

Scope* resolve_scope(const string& name, Scope* scope) {
	auto found_ns = scope->namespaces.find(name);
	if(found_ns != scope->namespaces.end()) { return found_ns->second; }

	auto found_type = scope->types.find(name);
	if(found_type != scope->types.end()) { return found_type->second.scope; }

	return NULL;
}

Scope* resolve_qualified(QualifiedName* name, Scope* scope) {
	if(name->names.size() == 0) { return NULL; }
	if(name->names.size() == 1) { return scope; }

	// Find the outermost qualification visible from current scope
	scope = get_namespace(name->names.front(), scope);
	if(scope == NULL) { return NULL; }

	// Traverse the scope along the path provided by the qualifications
	auto it = ++name->names.begin();
	auto last = --name->names.end();
	for(; it != last; ++it) {
		scope = resolve_scope(*it, scope);
		if(scope == NULL) { return NULL; }
	}

	return scope;
}

Variable* get_variable(const string& name, Scope* scope) {
	// Keep traversing up scopes till we find the name
	while(scope != NULL) {
		auto found = scope->variables.find(name);
		if(found != scope->variables.end())
		{
			return &found->second;
		}
		scope = scope->parent;
	}

	return NULL;
}

Variable* get_variable(QualifiedName* name, Scope* scope) {
	if(name->names.size() == 0) { return NULL; }

	// If the name doesn't have qualifications, it can be found anywhere
	if(name->names.size() == 1) {
		return get_variable(name->names.front(), scope);
	}

	// If the name has qualification it has to be found at that location
	scope = resolve_qualified(name, scope);
	if(scope == NULL) { return NULL; }
	auto found = scope->variables.find(name->names.back());
	if(found == scope->variables.end()) { return NULL; }
	return &found->second;
}

Type* get_type(const string& name, Scope* scope) {
	// Keep traversing up scopes till we find the name
	while(scope != NULL) {
		auto found = scope->types.find(name);
		if(found != scope->types.end())
		{
			return &found->second;
		}

		scope = scope->parent;
	}

	return NULL;
}

Type* get_type(QualifiedName* name, Scope* scope) {
	if(name->names.size() == 0) { return NULL; }

	// If the name doesn't have qualifications, it can be found anywhere
	if(name->names.size() == 1) {
		return get_type(name->names.front(), scope);
	}

	// If the name has qualification it has to be found at that location
	scope = resolve_qualified(name, scope);
	if(scope == NULL) { return NULL; }
	auto found = scope->types.find(name->names.back());
	if(found == scope->types.end()) { return NULL; }
	return &found->second;
}

Scope* get_namespace(const string& name, Scope* scope) {
	// Keep traversing up scopes till we find the name
	while(scope != NULL) {
		auto found = scope->namespaces.find(name);
		if(found != scope->namespaces.end())
		{
			return found->second;
		}
		scope = scope->parent;
	}

	return NULL;
}

string print_type_error(Subtype expected, Subtype received)
{
	return "TODO: Bad type";
}

string print_location(const Location& loc)
{
	return "TODO: Location";
}

string print_location(const Location* loc)
{
	if(loc == NULL) { return "TODO: Unknown location"; }
	return print_location(*loc);
}